{"version":3,"file":"static/js/955.669e5cc8.chunk.js","mappings":"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","sources":["components/Product/Trends/index.tsx","components/Product/Trend/index.tsx","pages/search/index.tsx"],"sourcesContent":["import React from \"react\";\nimport Grid from '@material-ui/core/Grid'\n\nconst Trends: React.FC = (props) => {\n    return (\n        <Grid container spacing={2}>\n            {props.children}\n        </Grid>\n    )\n}\n\nexport default Trends","import React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport * as echarts from 'echarts';\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport { ProductTrend } from './../../../store/types'\nimport './index.scss'\n\ninterface TrendProps extends ProductTrend {\n    loading?: boolean\n}\n\nconst Trend: React.FC<TrendProps> = (props) => {\n    const echartsDom = useRef(null)\n    const [chartWidth, setChartWidth] = useState<number>(178)\n    const [chart, setChart] = useState<echarts.ECharts | null>()\n    const { search_msv, name, growth, update_dt, loading } = props\n\n    const initChart = useCallback(() => {\n        if (!chart && !loading && echartsDom?.current) {\n            // 初始化chart\n            // @ts-ignore\n            const chart = echarts.init(echartsDom.current)\n            chart.setOption({\n                tooltip: {},\n                grid: {\n                    bottom: 0,\n                    left: 0,\n                    right: 0\n                },\n                xAxis: {\n                    show: false,\n                    data: search_msv?.reduce((p: string[], c) => {\n                        p.push(c.date)\n                        return p\n                    }, [])\n                },\n                yAxis: {\n                    show: false,\n                },\n                series: [\n                    {\n                        name: 'sv',\n                        type: 'line',\n                        data: search_msv?.reduce((p: number[], c) => {\n                            p.push(c.sv)\n                            return p\n                        }, []),\n                        lineStyle: {\n                            width: 0\n                        },\n                        areaStyle: {\n                            opacity: 0.8,\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: 'rgb(0, 221, 255)'\n                                },\n                                {\n                                    offset: 1,\n                                    color: 'rgb(77, 119, 255)'\n                                }\n                            ])\n                        },\n                    }\n                ]\n            });\n            setChart(chart)\n        }\n    }, [loading, chart, search_msv])\n\n    /** chart resize */\n    const chartResize = useCallback(() => {\n        setChartWidth((echartsDom as any).current?.clientWidth)\n        chart?.resize()\n    }, [chart, echartsDom])\n\n    useEffect(() => {\n        window.addEventListener('resize', chartResize)\n    }, [chart, chartResize])\n\n    useEffect(() => () => {\n        window.removeEventListener('resize', chartResize)\n    }, [chartResize])\n\n    useEffect(() => {\n        setChartWidth((echartsDom as any).current?.clientWidth)\n        initChart()\n    }, [echartsDom, initChart])\n\n    useEffect(() => {\n        chart?.resize()\n    }, [chartWidth, chart])\n\n    return (\n        <Grid item xs={12} md={3} sm={6} lg={3} className=\"trend\">\n            <Card >\n                <CardContent >\n                    <div className=\"trend-header\">\n                        <h3><small>{name?.split(' ')[0]}</small> {name?.split(' ')[1]}</h3>\n                        <small>{growth ? `Growth: ${growth}%` : ''}</small>\n                    </div>\n                    <div className=\"trend-chart\" style={{ height: chartWidth }} ref={echartsDom} ><Skeleton variant=\"rect\" height={chartWidth} /></div>\n                </CardContent>\n                <CardActions>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" style={{ textAlign: 'center', width: '100%', padding: \"0 10px\" }}>{loading ? <Skeleton /> : update_dt}</Typography>\n                </CardActions>\n            </Card>\n        </Grid>\n    )\n}\n\nexport default Trend","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Store } from '../../store/types'\nimport { useParams } from 'react-router-dom'\nimport { SET_KEYWORD, ADD_KEYWORD_HISTORY, SET_PRODUCT_TRENDS, loadProductTrends } from '../../store/actions'\nimport * as Product from './../../components/Product'\nimport './index.scss'\n\n\nexport default function Home() {\n\n    const dispatch = useDispatch()\n    const productTrends = useSelector((state: Store) => state.product_trends)\n\n    const [loading, setLoading] = useState<boolean>(true)\n\n    let { keyword } = useParams()\n    keyword = (keyword as string).replaceAll('+', ' ').replaceAll('%2F', '/')\n\n\n    useEffect(() => {\n        // 更新当前keyword\n        dispatch({\n            type: SET_KEYWORD,\n            payload: keyword\n        })\n\n        // 添加搜索记录\n        dispatch({\n            type: ADD_KEYWORD_HISTORY,\n            payload: keyword\n        })\n\n        // 获取远程数据\n        async function fetchData() {\n            await dispatch(loadProductTrends((keyword as string)))\n            setLoading(false)\n        }\n\n        fetchData();\n    }, [keyword, dispatch])\n\n    /** 组件卸载前清除keyword */\n    useEffect(() => () => {\n        dispatch({\n            type: SET_KEYWORD,\n            payload: ''\n        })\n        dispatch({\n            type: SET_PRODUCT_TRENDS,\n            payload: []\n        })\n    }, [dispatch])\n\n    return (\n        <div className=\"search\">\n            <h3 className=\"title\">Related product trends</h3>\n            <Product.Trends>\n                {loading ?\n                    [{}, {}, {}, {}].map((s, index) => <Product.Trend {...s} key={index} loading />) :\n                    productTrends.map((s, index) => <Product.Trend {...s} key={`${index}${s.name}`} />)}\n            </Product.Trends>\n        </div>\n    )\n}"],"names":["props","Grid","container","spacing","children","echartsDom","useRef","useState","chartWidth","setChartWidth","chart","setChart","search_msv","name","growth","update_dt","loading","initChart","useCallback","current","echarts","setOption","tooltip","grid","bottom","left","right","xAxis","show","data","reduce","p","c","push","date","yAxis","series","type","sv","lineStyle","width","areaStyle","opacity","color","offset","chartResize","clientWidth","resize","useEffect","window","addEventListener","removeEventListener","item","xs","md","sm","lg","className","Card","CardContent","split","style","height","ref","Skeleton","variant","CardActions","Typography","component","textAlign","padding","Home","dispatch","useDispatch","productTrends","useSelector","state","product_trends","setLoading","keyword","useParams","replaceAll","loadProductTrends","SET_KEYWORD","payload","ADD_KEYWORD_HISTORY","fetchData","SET_PRODUCT_TRENDS","map","s","index","key"],"sourceRoot":""}